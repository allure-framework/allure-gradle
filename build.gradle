group = 'io.qameta.allure'

buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.gradle.publish:plugin-publish-plugin:0.10.0'
        classpath 'net.researchgate:gradle-release:2.8.0'
        classpath 'ru.vyarus:gradle-quality-plugin:3.3.0'
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'ru.vyarus.quality'

apply from: "${rootProject.projectDir}/gradle/plugin-publish.gradle"
apply from: "${rootProject.projectDir}/gradle/maven-publish.gradle"
apply from: "${rootProject.projectDir}/gradle/bintray.gradle"
apply from: "${rootProject.projectDir}/gradle/release.gradle"

gradlePlugin {
    plugins {
        allurePlugin {
            id = 'io.qameta.allure'
            implementationClass = 'io.qameta.allure.gradle.AllurePlugin'
        }
    }
}

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    options.encoding = 'UTF-8'
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

configurations {
    junit5Plugin
}

dependencies {
    compile localGroovy()

    testCompile gradleTestKit()
    testCompile 'junit:junit:4.12'
    testCompile 'commons-io:commons-io:2.5'
    testCompile 'org.assertj:assertj-core:3.6.2'
    testCompile 'org.apache.commons:commons-text:1.1'

    junit5Plugin 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
    testRuntime files(testPluginClasspath(sourceSets.main.runtimeClasspath.files + configurations.junit5Plugin.files))
}

quality {
    pmdVersion = '5.5.4'
    checkstyleVersion = '7.6'
    findbugsVersion = '3.0.1'
    codenarcVersion = '0.26.0'
}

def testPluginClasspath(Collection<File> collections) {
    def generatedDir = new File(buildDir, "generated")
    def pluginsClasspathFile = new File(generatedDir, "plugin-classpath.txt")

    generatedDir.mkdirs()

    pluginsClasspathFile.text = collections.join("\n")
    return generatedDir
}
